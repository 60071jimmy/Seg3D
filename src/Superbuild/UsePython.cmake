#set(PYTHON_VERSION_HEADER ${SCI_PYTHON_SOURCE_INCLUDE}/patchlevel.h)
#
## Find and parse version information
#file(STRINGS ${PYTHON_VERSION_HEADER} PY_MAJOR_VERSIONSTR
#  REGEX "#define[ \t]+PY_MAJOR_VERSION[ \t]+[0-9]+")
#string(REGEX MATCH "[0-9]+" PY_MAJOR_VERSIONSTR ${PY_MAJOR_VERSIONSTR})
#string(LENGTH ${PY_MAJOR_VERSIONSTR} PY_MAJOR_VERSIONSTR_LEN)
#
#file(STRINGS ${PYTHON_VERSION_HEADER} PY_MINOR_VERSIONSTR
#  REGEX "#define[ \t]+PY_MINOR_VERSION[ \t]+[0-9]+")
#string(REGEX MATCH "[0-9]+" PY_MINOR_VERSIONSTR ${PY_MINOR_VERSIONSTR})
#string(LENGTH ${PY_MINOR_VERSIONSTR} PY_MINOR_VERSIONSTR_LEN)
#
#file(STRINGS ${PYTHON_VERSION_HEADER} PY_MICRO_VERSIONSTR
#  REGEX "#define[ \t]+PY_MICRO_VERSION[ \t]+[0-9]+")
#string(REGEX MATCH "[0-9]+" PY_MICRO_VERSIONSTR ${PY_MICRO_VERSIONSTR})
#string(LENGTH ${PY_MICRO_VERSIONSTR} PY_MICRO_VERSIONSTR_LEN)
#
#if(PY_MAJOR_VERSIONSTR_LEN AND PY_MINOR_VERSIONSTR_LEN AND PY_MICRO_VERSIONSTR_LEN)
#  math(EXPR PY_MAJOR "${PY_MAJOR_VERSIONSTR}")
#  math(EXPR PY_MINOR "${PY_MINOR_VERSIONSTR}")
#  math(EXPR PY_PATCH "${PY_MICRO_VERSIONSTR}")
#  set(SCI_PYTHON_VERSION "${PY_MAJOR}.${PY_MINOR}.${PY_PATCH}")
#  set(SCI_PYTHON_VERSION_SHORT "${PY_MAJOR}.${PY_MINOR}")
#  message(STATUS "Python version ${PYTHON_VERSION}")
#else()
#  message(FATAL_ERROR "Unable to parse Python version from ${CMAKE_CURRENT_SOURCE_DIR}/Include/patchlevel.h")
#endif()

include_directories(${SCI_PYTHON_INCLUDE})
link_directories(${SCI_PYTHON_LIBRARY_DIR})
#set(SCI_PYTHON_ROOT ${SCI_PYTHON_ROOT_DIR})
#set(SCI_PYTHON_EXE ${PYTHON_EXE})
#set(PYTHON_MODULE_SEARCH_PATH ${PYTHON_MODULES})
#add_definitions(-DBUILD_WITH_PYTHON -DPy_NO_ENABLE_SHARED=1)
add_definitions(-DBUILD_WITH_PYTHON)
